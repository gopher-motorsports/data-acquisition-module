// Autogenerated by SensorCannon
#include "{{configFileName}}.h"
#include "GopherCan.h"

//ADC1
{% for param in module.adc1_params %}
{% set i = loop.index %}
ANALOG_SENSOR_PARAM adc1_param{{i}};

adc1_param{{i}}.analog_param = {{param.param_name}};
adc1_param{{i}}.param_id = {{param.id}};
adc1_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
{% set l = param.filtered_params|length %}
adc1_param{{i}}.num_filtered_subparams = {{l}};

{% if l > 0 %}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc1_param{{i}}_filtered_{{loop.index}};
adc1_param{{i}}_filtered_{{loop.index}}.filtered_param = {{fparam.name}};
adc1_param{{i}}_filtered_{{loop.index}}.param_id = {{fparam.id}}
adc1_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}}
adc1_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}}
{% endfor %}
FILTERED_PARAM adc1_param{{i}}_fparam_list[{{l}}] = {
{% for n in range(l) %}
adc1_param{{i}}_filtered_{{n+1}}{% if n+1 < l %},{% endif %}
{% endfor %}
}
adc1_param{{i}}.filtered_subparams = adc1_param{{i}}_fparam_list;
{% else %}
adc1_param{{i}}.filtered_subparams = NULL;
{% endif %}

U16_BUFFER adc1_param{{i}}_u16buffer;
U16 adc1_param{{i}}_buffer[{{param.buffer_size}}]; 
adc1_param{{i}}_u16buffer.buffer = adc1_param{{i}}_buffer;
adc1_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
adc1_param{{i}}_u16buffer.fill_level = 0;

adc1_param{{i}}.buffer = adc1_param{{i}}_u16buffer;
{% endfor %}




//ADC2
{% for param in module.adc2_params %}
{% set i = loop.index %}
ANALOG_SENSOR_PARAM adc2_param{{i}};

adc2_param{{i}}.analog_param = {{param.param_name}};
adc2_param{{i}}.param_id = {{param.id}};
adc2_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
{% set l = param.filtered_params|length %}
adc2_param{{i}}.num_filtered_subparams = {{l}};

{% if l > 0 %}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc2_param{{i}}_filtered_{{loop.index}};
adc2_param{{i}}_filtered_{{loop.index}}.filtered_param = {{fparam.name}};
adc2_param{{i}}_filtered_{{loop.index}}.param_id = {{fparam.id}};
adc2_param{{i}}_filterefparam.filter[0]ram.filter['filter_type'].upper()}};
adc2_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
{% endfor %}
FILTERED_PARAM adc2_param{{i}}_fparam_list[{{l}}] = {
{% for n in range(l) %}
adc2_param{{i}}_filtered_{{n+1}}{% if n+1 < l %},{% endif %}
{% endfor %}
}
adc2_param{{i}}.filtered_subparams = adc2_param{{i}}_fparam_list;
{% else %}
adc2_param{{i}}.filtered_subparams = NULL;
{% endif %}


U16_BUFFER adc2_param{{i}}_u16buffer;
U16 adc2_param{{i}}_buffer[{{param.buffer_size}}]; 
adc2_param{{i}}_u16buffer.buffer = adc2_param{{i}}_buffer;
adc2_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
adc2_param{{i}}_u16buffer.fill_level = 0;

adc2_param{{i}}.buffer = adc2_param{{i}}_u16buffer;
{% endfor %}

//ADC3
{% for param in module.adc3_params %}
{% set i = loop.index %}
ANALOG_SENSOR_PARAM adc3_param{{i}};

adc3_param{{i}}.analog_param = {{param.param_name}};
adc3_param{{i}}.param_id = {{param.id}};
adc3_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
{% set l = param.filtered_params|length %}
adc3_param{{i}}.num_filtered_subparams = {{l}};

{% if l > 0%}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc3_param{{i}}_filtered_{{loop.index}};
adc3_param{{i}}_filtered_{{loop.index}}.filtered_param = {{fparam.name}};
adc3_param{{i}}_filtered_{{loop.index}}.param_id = {{fparam.id}};
adc3_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
adc3_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
{% endfor %}
FILTERED_PARAM adc3_param{{i}}_fparam_list[{{l}}] = {
{% for n in range(l) %}
adc3_param{{i}}_filtered_{{n+1}}{% if n+1 < l %},{% endif %}
{% endfor %}
}
adc3_param{{i}}.filtered_subparams = adc3_param{{i}}_fparam_list;
{% else %}
adc3_param{{i}}.filtered_subparams = NULL;
{% endif %}

U16_BUFFER adc3_param{{i}}_u16buffer;
U16 adc3_param{{i}}_buffer[{{param.buffer_size}}]; 
adc3_param{{i}}_u16buffer.buffer = adc3_param{{i}}_buffer;
adc3_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
adc3_param{{i}}_u16buffer.fill_level = 0;

adc3_param{{i}}.buffer = adc3_param{{i}}_u16buffer;
{% endfor %}


//CAN_SENSOR_PARAMS
{% for param in module.can_params %}
{% set i = loop.index %}
CAN_SESNOR_PARAM can_param_{{i}};
can_param_{{i}}.can_param = {{param.param_name}};
can_param_{{i}}.param_id = {{param.id}};
{% set name = module.getSensorName(param.producer) %}
can_param_{{i}}.can_sensor = {{name}}
can_param_{{i}}.message_idx = {{module.getDependencyMessageIndex(name, param.dependency)}}
{% set l = param.filtered_params|length %}
can_param_{{i}}.num_filtered_subparams = {{l}};

{% if l > 0%}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM can_param{{i}}_filtered_{{loop.index}};
can_param{{i}}_filtered_{{loop.index}}.filtered_param = {{fparam.name}};
can_param{{i}}_filtered_{{loop.index}}.param_id = {{fparam.id}};
can_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
can_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
{% endfor %}
FILTERED_PARAM can_param{{i}}_fparam_list[{{l}}] = {
{% for n in range(l) %}
can_param{{i}}_filtered_{{n+1}}{% if n+1 < l %},{% endif %}
{% endfor %}
}
can_param{{i}}.filtered_subparams = can_param{{i}}_fparam_list;
{% else %}
can_param{{i}}.filtered_subparams = NULL;
{% endif %}

U16_BUFFER can_param{{i}}_u16buffer;
U16 can_param{{i}}_buffer[{{param.buffer_size}}]; 
can_param{{i}}_u16buffer.buffer = can_param{{i}}_buffer;
can_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
can_param{{i}}_u16buffer.fill_level = 0;

can_param{{i}}.buffer = can_param{{i}}_u16buffer;

{% endfor %}
 

// Buckets if any



//END autogenerted file