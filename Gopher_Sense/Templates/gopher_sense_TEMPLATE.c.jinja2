// Generated by SensorCannon
#include "gopher_sense.h"

#define continuous 0

//ANALOG_SENSORS
{% for sensor in analog_sensors %}
// Sensor definition {{sensor.name}}
ANALOG_SENSOR {{sensor.name}};
{{sensor.name}}.sensor_id = "{{sensor.sensorID}}";
{{sensor.name}}.model.type = {{sensor.analog['output_model'].upper()}};
{{sensor.name}}.model.measurement_unit = {{sensor.analog['measurement_unit'].upper()}};
{{sensor.name}}.model.supply_voltage = {{sensor.analog['supply_voltage']}};
{{sensor.name}}.model.inline_resistance = {{sensor.analog['inline_resistance']}};
{{sensor.name}}.model.low_bar = {{sensor.analog['low_bar']}};
{{sensor.name}}.model.high_bar = {{sensor.analog['high_bar']}};
{{sensor.name}}.model.low_bar_value = {{sensor.analog['low_bar_value']}};
{{sensor.name}}.model.high_bar_value = {{sensor.analog['high_bar_value']}};

{% if sensor.table %}
TABLE {{sensor.name}}_output_model_table;
{{sensor.name}}_output_model_table.independent_unit = {{sensor.table['independent_unit'].upper()}};
{{sensor.name}}_output_model_table.dependent_unit = {{sensor.table['dependent_unit'].upper()}};
{% set l = sensor.numTableEntries %}
{{sensor.name}}_output_model_table.num_entries = {{l}};
float {{sensor.name}}_output_model_table_independent_vars[{{l}}] = {
 {% for entry in sensor.tableEntries[0] -%}
    {{entry}}{% if loop.index < l %},{% endif %}
 {% endfor %}
};
float {{sensor.name}}_output_model_table_dependent_vars[{{sensor.numTableEntries}}] = {
  {% for entry in sensor.tableEntries[1] -%}
    {{entry}}{% if loop.index < l %},{% endif %}
  {% endfor %}
};
{{sensor.name}}_output_model_table.independent_vars = {{sensor.name}}_output_model_table_independent_vars;
{{sensor.name}}_output_model_table.dependent_vars = {{sensor.name}}_output_model_table_dependent_vars;
{{sensor.name}}.model.table = &{{sensor.name}}_output_model_table;

{% else %}
{{sensor.name}}.model.table = NULL;
{% endif %}

{% for o in sensor.outputs -%}
{{sensor.name}}.output.output_name = {{o}};
{{sensor.name}}.output.scalar.quantization = {{sensor.outputs[o]['quantization']}}; //0 if continuous
{{sensor.name}}.output.scalar.offset = {{sensor.outputs[o]['offset']}};
{{sensor.name}}.output.data_size_bits = {{sensor.outputs[o]['data_size']}};
{% endfor %}
{% endfor %}

// CAN sensors
{% for sensor in can_sensors %}
// Sensor definition {{sensor.name}}
CAN_SENSOR {{sensor.name}};
{{sensor.name}}.sensor_id = "{{sensor.sensorID}}";
{{sensor.name}}.byte_order = {{sensor.byte_order}};
{% set l = sensor.numMessages %}
{{sensor.name}}.num_messages = {{l}}; 

{% for message in sensor.messages -%}
{% set m = sensor.messages[message] %}
{% set output = m['output_measured'] %}
SENSOR_CAN_MESSAGE {{sensor.name}}_message_{{loop.index}};
{{sensor.name}}_message_{{loop.index}}.message_id = {{m['id']}};
{{sensor.name}}_message_{{loop.index}}.output.output_name = "{{output}}";
{{sensor.name}}_message_{{loop.index}}.output.scalar.quantization = {{sensor.outputs[output]['quantization']}};
{{sensor.name}}_message_{{loop.index}}.output.scalar.offset = {{sensor.outputs[output]['offset']}};
{{sensor.name}}_message_{{loop.index}}.data_start = {{m['data_byte_start']}};
{{sensor.name}}_message_{{loop.index}}.data_end = {{m['data_byte_end']}};
{% endfor %}

SENSOR_CAN_MESSAGE {{sensor.name}}_messages[{{l}}] = {
{% for n in range(1,l+1,1) -%}
    {{sensor.name}}_message_{{n}}{% if n < l %},{% endif %} 
{% endfor %}
};

{{sensor.name}}.messages = {{sensor.name}}_messages;
{% endfor %}

#undef continuous

{#
ANALOG_SENSOR* analog_sensor_list[NUM_ANALOG_SENSORS] = {
 {% set i = 1 %}
 {% for sensor in analog_sensors %}
    {{sensor.name}}{% if i < l %},{% endif %}
    {% set i = i+1 %}
 {% endfor %}

};

CAN_SENSOR* can_sensor_list[NUM_CAN_SENSORS] = {
 {% set i = 1 %}
 {% for sensor in can_sensors %}
    {{sensor.name}}{% if i < l %},{% endif %}
    {% set i = i+1 %}
 {% endfor %}
};
#}
// END autogenerated file
