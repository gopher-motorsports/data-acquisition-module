// Generated by SensorCannon
#include gopher_sense.h


//ANALOG_SENSORS
ANALOG_SENSOR honeywell;
honeywell.sensor_id = {{}};


honeywell.model.type = {{}};
honeywell.model.measurement_unit= {{}};
honeywell.model.measurement_dependent_quanitity = {{}};
honeywell.model.low_bar = {{}};
honeywell.model.high_bar = {{}};
honeywell.model.low_bar_value = {{}};
honeywell.model.high_bar_value = {{}};
honeywell.model.supply_voltage = {{}};
honeywell.model.inline_resistance = {{}};


// if tabluar model
TABLE honeywell_output_model_table;
honeywell_output_model_table.independent_unit = {{}}
honeywell_output_model_table.dependent_unit = {{}};
honeywell_output_model_table.num_entries = {{}};
float honeywell_output_model_table_independent_vars[{{}}] = {
 {{}}
}
float honeywell_output_model_table_dependent_vars[{{}}] = {
 {{}}
}
honeywell_output_model_table.independent_vars = {{honeywell_output_model_table_independent_vars}};
honeywell_output_model_table.dependent_vars = {{honeywell_output_model_table_dependent_vars}};
honeywell.model.table = &honeywell_table;
// else
honeywell.model.table = null;

honeywell.output.output_name = {{}};
honeywell.output.scalar.quantization = {{}}; //0 if continuous
honeywell.output.scalar.offset = {{}};
honeywell.output.data_size_bits = {{}};



// CAN sensors
CAN_SENSOR bosch;
bosch.sensor_id = {{}};
bosch.byte_order = {{}};
bosch.num_messages = {{}}; 

SENSOR_CAN_MESSAGE {{bosch_message1}};
{{bosch_message1}}.message_id = {{}};
{{}}.output.output_name = {{}};
{{}}.output.scalar.quantization = {{}};
{{}}.output.scalar.offset = {{}};
{{}}.data_start = {{}};
{{}}.data_end= {{}};

SENSOR_CAN_MESSAGES bosch_can_messages[{{}}] = {
    {{}}
}






ANALOG_SENSOR* analog_sensor_list[NUM_ANALOG_SENSORS] = {
    &honeywell,


}
CAN_SENSOR* can_sensor_list[NUM_CAN_SENSORS] = {
    &bosch,

}
